{"version":3,"sources":["Android.ts"],"names":["_lastUrl","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","isPlatformSupported","process","platform","getAdbOutputAsync","args","Binaries","addToPathAsync","result","stdout","e","errorMessage","_","trim","stderr","startsWith","substring","length","Error","_isDeviceAttachedAsync","devices","lines","split","_isDeviceAuthorizedAsync","shift","listOfDevicesWithoutFirstLine","join","includes","_isExpoInstalledAsync","packages","i","line","_expoVersionAsync","info","regex","regexMatch","exec","_checkExpoUpToDateAsync","versions","Versions","versionsAsync","installedVersion","semver","lt","androidVersion","Logger","notifications","warn","code","NotificationCode","OLD_ANDROID_APP_VERSION","_apkCacheDirectory","dotExpoHomeDirectory","UserSettings","dir","path","fs","mkdirpSync","downloadApkAsync","url","apkPath","pathExists","Api","downloadAsync","androidUrl","installExpoAsync","global","START_LOADING","STOP_LOADING","uninstallExpoAsync","upgradeExpoAsync","assertDeviceReadyAsync","error","message","genymotionMessage","_openUrlAsync","output","indexOf","openUrlAsync","isDetached","installedExpo","Analytics","logEvent","openProjectAsync","projectRoot","startAdbReverseAsync","projectUrl","UrlUtils","constructManifestUrlAsync","exp","success","openWebProjectAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","port","adbReverse","stopAdbReverseAsync","adbReverseRemove","debug","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","projectDir","gteSdkVersion","splashScreenMode","get","generalSplashImagePath","chalk","italic","generalSplashImage","androidSplash","androidSplashImages","imageRelativePath","splashImage","width","height","expectedWidth","expectedHeight","push","sizeMatches","bold","some","map"],"mappings":"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","sourcesContent":["import { readConfigJsonAsync, readExpRcAsync } from '@expo/config';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport path from 'path';\nimport semver from 'semver';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectSettings from './ProjectSettings';\nimport { getImageDimensionsAsync } from './tools/ImageUtils';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport { getUrlAsync as getWebpackUrlAsync } from './Webpack';\n\nlet _lastUrl: string | null = null;\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n\n  try {\n    let result = await spawnAsync('adb', args);\n    return result.stdout;\n  } catch (e) {\n    let errorMessage = _.trim(e.stderr);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n// Device attached\nasync function _isDeviceAttachedAsync() {\n  let devices = await getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  // First line is \"List of devices\".\n  return lines.length > 1;\n}\n\nasync function _isDeviceAuthorizedAsync() {\n  let devices = await getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  lines.shift();\n  let listOfDevicesWithoutFirstLine = lines.join('\\n');\n  // result looks like \"072c4cf200e333c7  device\" when authorized\n  // and \"072c4cf200e333c7  unauthorized\" when not.\n  return listOfDevicesWithoutFirstLine.includes('device');\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync() {\n  let packages = await getAdbOutputAsync(['shell', 'pm', 'list', 'packages', '-f']);\n  let lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    if (line.includes('host.exp.exponent.test')) {\n      continue;\n    }\n\n    if (line.includes('host.exp.exponent')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function _expoVersionAsync() {\n  let info = await getAdbOutputAsync(['shell', 'dumpsys', 'package', 'host.exp.exponent']);\n\n  let regex = /versionName=([0-9.]+)/;\n  let regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.androidVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_ANDROID_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nfunction _apkCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'android-apk-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function downloadApkAsync(url?: string) {\n  let versions = await Versions.versionsAsync();\n  let apkPath = path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`);\n\n  if (await fs.pathExists(apkPath)) {\n    return apkPath;\n  }\n\n  await Api.downloadAsync(\n    url || versions.androidUrl,\n    path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`)\n  );\n  return apkPath;\n}\n\nexport async function installExpoAsync(url?: string) {\n  Logger.global.info(`Downloading latest version of Expo`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let path = await downloadApkAsync(url);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info(`Installing Expo on device`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await getAdbOutputAsync(['install', path]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nexport async function uninstallExpoAsync() {\n  Logger.global.info('Uninstalling Expo from Android device.');\n  return await getAdbOutputAsync(['uninstall', 'host.exp.exponent']);\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  try {\n    await assertDeviceReadyAsync();\n\n    await uninstallExpoAsync();\n    await installExpoAsync();\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\n// Open Url\nexport async function assertDeviceReadyAsync() {\n  const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n\n  if (!(await _isDeviceAttachedAsync())) {\n    throw new Error(\n      `No Android device found. Please connect a device and follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  if (!(await _isDeviceAuthorizedAsync())) {\n    throw new Error(\n      `This computer is not authorized to debug the device. Please follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n}\n\nasync function _openUrlAsync(url: string) {\n  let output = await getAdbOutputAsync([\n    'shell',\n    'am',\n    'start',\n    '-a',\n    'android.intent.action.VIEW',\n    '-d',\n    url,\n  ]);\n  if (output.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(output.substring(output.indexOf('Error: ')));\n  }\n\n  return output;\n}\n\nasync function openUrlAsync(url: string, isDetached: boolean = false): Promise<void> {\n  try {\n    await assertDeviceReadyAsync();\n\n    let installedExpo = false;\n    if (!isDetached && !(await _isExpoInstalledAsync())) {\n      await installExpoAsync();\n      installedExpo = true;\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening on Android device`);\n    try {\n      await _openUrlAsync(url);\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${\n          e.message\n        }`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot);\n    let { exp } = await readConfigJsonAsync(projectRoot);\n\n    await openUrlAsync(projectUrl, !!exp.isDetached);\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await getWebpackUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    await openUrlAsync(projectUrl, true);\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't open the web project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  let adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (let port of adbReversePorts) {\n    if (!(await adbReverse(port))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  let adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (let port of adbReversePorts) {\n    await adbReverseRemove(port);\n  }\n}\n\nasync function adbReverse(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['reverse', `tcp:${port}`, `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['reverse', '--remove', `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nconst splashScreenDPIConstraints = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectDir - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectDir: string): Promise<void> {\n  const { exp } = await readConfigJsonAsync(projectDir);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode =\n    _.get(exp, 'android.splash.resizeMode') || _.get(exp, 'splash.resizeMode', 'contain');\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = _.get(exp, 'splash.image');\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await getImageDimensionsAsync(projectDir, generalSplashImagePath);\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = _.get(exp, 'android.splash');\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = _.get(androidSplash, dpi);\n    if (imageRelativePath) {\n      const splashImage = await getImageDimensionsAsync(projectDir, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.io/versions/latest/guides/splash-screens/#differences-between-environments---android for more information`);\n    return;\n  }\n\n  if (_.some(androidSplashImages, ({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.io/versions/latest/guides/splash-screens/#differences-between-environments---android for more information`);\n  }\n}\n"],"file":"../Android.js","sourceRoot":"/@expo/xdl@57.0.2/src"}