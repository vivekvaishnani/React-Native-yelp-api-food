{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA,uDAAyC;AACzC,+BAA4C;AAC5C,sEAA6C;AAC7C,qCAAuC;AAEvC,mBACE,GAAqB,EACrB,OAAkB,EAAE;;QAEpB,MAAM,WAAW,GAAgB,yBAAmB,CAAC,GAAG,CAAC,CAAC;QAE1D,MAAM,MAAM,GAAqC,MAAM,wBAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAExF,IAAI,WAAW,CAAC,IAAI,EAAE;YACpB,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;SAC5C;QAED,OAAO,oBAAW,CAAC,MAAM,kBAAI,WAAW,EAAE,WAAW,CAAC,WAAW,IAAK,IAAI,CAAC,OAAO,EAAG,CAAC;IACxF,CAAC;CAAA;AAbD,4BAaC","sourcesContent":["import { Configuration } from 'webpack';\n\nimport { Arguments, DevConfiguration, Environment, InputEnvironment } from './types';\nimport * as Diagnosis from './Diagnosis';\nimport { validateEnvironment } from './env';\nimport webpackConfig from './webpack.config';\nimport { withWorkbox } from './addons';\n\nexport default async function(\n  env: InputEnvironment,\n  argv: Arguments = {}\n): Promise<Configuration | DevConfiguration> {\n  const environment: Environment = validateEnvironment(env);\n\n  const config: Configuration | DevConfiguration = await webpackConfig(environment, argv);\n\n  if (environment.info) {\n    Diagnosis.reportAsync(config, environment);\n  }\n\n  return withWorkbox(config, { projectRoot: environment.projectRoot, ...argv.workbox });\n}\n"]}