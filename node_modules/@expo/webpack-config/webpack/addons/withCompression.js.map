{"version":3,"file":"withCompression.js","sourceRoot":"","sources":["../../src/addons/withCompression.ts"],"names":[],"mappings":";;;;;AAEA,aAAa;AACb,4FAA2D;AAC3D,aAAa;AACb,kFAAiD;AAGjD,oCAAoF;AACpF,gCAAmC;AAEtB,QAAA,oBAAoB,GAAG;IAClC,IAAI,EAAE,aAAa;IACnB,QAAQ,EAAE,kBAAkB;IAC5B,SAAS,EAAE,MAAM;IACjB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,GAAG;CACd,CAAC;AAEW,QAAA,sBAAsB,GAAG;IACpC,KAAK,EAAE,kBAAkB;IACzB,IAAI,EAAE,aAAa;IACnB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,GAAG;CACd,CAAC;AAEF,SAAwB,eAAe,CACrC,aAA+C,EAC/C,GAAgB;IAEhB,IAAI,aAAa,CAAC,IAAI,KAAK,YAAY,EAAE;QACvC,OAAO,aAAa,CAAC;KACtB;IAED,MAAM,MAAM,GAAG,eAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO,qBAAqB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC;AAVD,kCAUC;AAED,SAAgB,qBAAqB,CACnC,aAA+C,EAC/C,MAAkB;IAElB,MAAM,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;IAClC,MAAM,UAAU,GAAG,oCAA4B,CAAC,KAAK,CAAC,IAAI,EAAE,4BAAoB,EAAE,IAAI,CAAC,CAAC;IACxF,MAAM,YAAY,GAAG,kCAA0B,CAAC,KAAK,CAAC,MAAM,EAAE,8BAAsB,EAAE,IAAI,CAAC,CAAC;IAE5F,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;QAAE,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC;IAEtE,IAAI,UAAU;QAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,oCAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9E,IAAI,YAAY;QAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,+BAAY,CAAC,YAAY,CAAC,CAAC,CAAC;IAE7E,OAAO,aAAa,CAAC;AACvB,CAAC;AAdD,sDAcC","sourcesContent":["import { Configuration } from 'webpack';\n\n// @ts-ignore\nimport CompressionPlugin from 'compression-webpack-plugin';\n// @ts-ignore\nimport BrotliPlugin from 'brotli-webpack-plugin';\nimport { ExpoConfig } from '@expo/config';\nimport { DevConfiguration, Environment } from '../types';\nimport { enableWithPropertyOrConfig, overrideWithPropertyOrConfig } from '../utils';\nimport { getConfig } from '../env';\n\nexport const DEFAULT_GZIP_OPTIONS = {\n  test: /\\.(js|css)$/,\n  filename: '[path].gz[query]',\n  algorithm: 'gzip',\n  threshold: 1024,\n  minRatio: 0.8,\n};\n\nexport const DEFAULT_BROTLI_OPTIONS = {\n  asset: '[path].br[query]',\n  test: /\\.(js|css)$/,\n  threshold: 1024,\n  minRatio: 0.8,\n};\n\nexport default function withCompression(\n  webpackConfig: Configuration | DevConfiguration,\n  env: Environment\n): Configuration | DevConfiguration {\n  if (webpackConfig.mode !== 'production') {\n    return webpackConfig;\n  }\n\n  const config = getConfig(env);\n  return addCompressionPlugins(webpackConfig, config);\n}\n\nexport function addCompressionPlugins(\n  webpackConfig: Configuration | DevConfiguration,\n  config: ExpoConfig\n): Configuration | DevConfiguration {\n  const { build = {} } = config.web;\n  const gzipConfig = overrideWithPropertyOrConfig(build.gzip, DEFAULT_GZIP_OPTIONS, true);\n  const brotliConfig = enableWithPropertyOrConfig(build.brotli, DEFAULT_BROTLI_OPTIONS, true);\n\n  if (!Array.isArray(webpackConfig.plugins)) webpackConfig.plugins = [];\n\n  if (gzipConfig) webpackConfig.plugins.push(new CompressionPlugin(gzipConfig));\n  if (brotliConfig) webpackConfig.plugins.push(new BrotliPlugin(brotliConfig));\n\n  return webpackConfig;\n}\n"]}